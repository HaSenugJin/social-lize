{{> layout/header}}
{{> layout/socialtab}}
<div class="fileadd-container">
    {{> layout/socialsidebar}}
    <div class="fileadd-content">
        <div class="fileadd-tabs">
            <div class="fileadd-tab active" id="defaultOpen" onclick="switchTab(event, 'Album')">앨범</div>
            <div class="fileadd-tab" onclick="switchTab(event, 'File')">파일</div>
        </div>
        <div id="Album" class="fileadd-tab-content">
            <div class="fileadd-content-header"><span id="albumCount">0</span></div>
            <div class="fileadd-grid-container">
                {{# models.albums}}
                    <div class="fileadd-grid-item {{#isVideo}}video{{/isVideo}}{{^isVideo}}photo{{/isVideo}}" data-type="{{type}}">
                        {{#isVideo}}
                            <video src="{{path}}" onclick="openModal(this.src, true)"></video>
                        {{/isVideo}}
                        {{^isVideo}}
                            <img src="{{path}}" alt="#" onclick="openModal(this.src, false)">
                        {{/isVideo}}
                    </div>
                {{/models.albums}}
            </div>
        </div>
        <div id="File" class="fileadd-tab-content">
            <div class="fileadd-file-search-upload">
                <div class="fileadd-file-search">
                    <input type="text" placeholder="파일 검색">
                </div>
                <div class="fileadd-file-upload">
                    <input type="file" id="fileInput" class="fileadd-file-input" onchange="handleFileUpload()">
                    <button onclick="document.getElementById('fileInput').click()">파일 올리기</button>
                </div>
            </div>
            <div class="fileadd-content-header"><span id="fileCount">0</span></div>
            <div class="fileadd-file-list" id="fileList">
                {{# models.files}}
                    <div class="fileadd-file-item">
                        <span onclick="downloadFile('{{path}}', 'file')" class="fileadd-file-name">{{name}}</span>
                        <button class="fileadd-file-download-btn" onclick="downloadFile('{{path}}', 'file')"><i class="fas fa-download"></i></button>
                    </div>
                {{/ models.files}}
            </div>
        </div>
    </div>
    <div class="fileadd-chat-container">
        <div class="fileadd-chat-header">
            <div class="fileadd-chat-title">SNS프로젝트 1조</div>
            <div id="connection-status" class="fileadd-chat-status">연결 중...</div>
            <div class="fileadd-chat-menu">⋮</div>
        </div>
        <div id="response" class="fileadd-chat-messages">
            <!-- 채팅 메시지가 이곳에 추가됩니다 -->
        </div>
        <div class="fileadd-chat-input">
            <input type="hidden" id="socialId" value="{{models.socialId}}" /> <!-- 소셜 ID -->
            <input type="hidden" id="userId" value="{{sessionUser.id}}" /> <!-- 유저 ID -->
            <input type="text" id="comment" placeholder="메시지를 입력하세요">
            <button id="send-button" onclick="sendMessage()">보내기</button>
        </div>
    </div>
    <div id="mediaModal" class="fi         leadd-file-modal">
        <span class="fileadd-close" onclick="closeModal()">&times;</span>
        <img class="fileadd-file-modal-content-img" id="modal-img">
        <video class="fileadd-file-modal-content-video" controls id="modal-video"></video>
        <button class="fileadd-album-download-btn" id="download-btn">다운로드</button>
    </div>
    <script>
        function switchTab(event, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("fileadd-tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("fileadd-tab");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("defaultOpen").click();
            updateAlbumItemCount("Album", "albumCount");
            updateFileItemCount("File", "fileCount");
        });

        function updateAlbumItemCount(tabId, countId) {
            var itemCount = document.querySelectorAll("#" + tabId + " .fileadd-grid-item").length;
            document.getElementById(countId).innerText = "전체 " + itemCount;
        }AA

        function openModal(src, isVideo = false) {
            var modal = document.getElementById('mediaModal');
            var modalImg = document.getElementById('modal-img');
            var modalVideo = document.getElementById('modal-video');
            var downloadBtn = document.getElementById('download-btn');

            if (isVideo) {
                modalVideo.src = src;
                modalVideo.style.display = 'block';
                modalImg.style.display = 'none';
                modal.style.display = 'block';
                modalVideo.play();
                downloadBtn.onclick = function () { downloadFile(src, 'video'); };
            } else {
                modalImg.src = src;
                modalImg.style.display = 'block';
                modalVideo.style.display = 'none';
                modal.style.display = 'block';
                downloadBtn.onclick = function () { downloadFile(src, 'image'); };
            }
            modal.addEventListener('click', closeModal);
        }

        function downloadFile(src, type) {
            var a = document.createElement('a');
            a.href = src;
            a.download = type === 'video' ? 'video.mp4' : 'image.png';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function closeModal() {
            var modal = document.getElementById('mediaModal');
            var modalVideo = document.getElementById('modal-video');
            modal.style.display = 'none';
            modalVideo.pause();
            modal.removeEventListener('click', closeModal);
        }

        function handleFileUpload() {
            var fileInput = document.getElementById('fileInput');
            var fileList = document.getElementById('fileList');
            var fileCount = document.getElementById('fileCount');
            var count = fileList.children.length;
            var existingFiles = {};

            Array.from(fileList.children).forEach(function (item) {
                var name = item.textContent.split(' (')[0];
                existingFiles[name] = (existingFiles[name] || 0) + 1;
            });

            if (fileInput.files.length > 0) {
                for (var i = 0; i < fileInput.files.length; i++) {
                    var file = fileInput.files[i];
                    var fileName = file.name;
                    var fileUrl = URL.createObjectURL(file);
                    var fileElement = document.createElement('div');
                    fileElement.className = 'fileadd-grid-item';

                    if (existingFiles[fileName]) {
                        var newName = fileName + ' (' + existingFiles[fileName] + ')';
                        fileElement.textContent = newName;
                        existingFiles[fileName]++;
                    } else {
                        fileElement.textContent = fileName;
                        existingFiles[fileName] = 1;
                    }

                    fileElement.onclick = function () {
                        var a = document.createElement('a');
                        a.href = fileUrl;
                        a.download = fileName;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                    };
                    fileList.appendChild(fileElement);
                }
            }
        }

        function updateFileItemCount(tabId, countId) {
            var itemCount = document.querySelectorAll("#" + tabId + " .fileadd-file-item").length;
            document.getElementById(countId).innerText = "전체 " + itemCount;
        }

        document.getElementById("copyLinkButton").addEventListener("click", function() {
            const link = "https://example.com/invite"; // 여기에 실제 초대 링크를 입력하세요.
            navigator.clipboard.writeText(link).then(function() {
                alert("초대 링크가 클립보드에 복사되었습니다.");
            }, function(err) {
                console.error("초대 링크 복사 실패: ", err);
            });
        });

        // 채팅 기능 스크립트

        // WebSocket 연결을 위한 변수 초기화
        var stompClient = null;
        var socialId = document.getElementById('socialId').value;

        // 연결 상태 업데이트 함수
        function updateConnectionStatus(status) {
            var statusElement = document.getElementById('connection-status');
            statusElement.textContent = status;
        }

        // WebSocket 연결 함수
        function connect() {
            updateConnectionStatus('연결 중...'); // 연결 시도 중인 상태로 설정
            var socket = new SockJS('/chat');
            stompClient = Stomp.over(socket);

            stompClient.connect({}, function (frame) {
                // 연결 성공 시 실행되는 콜백
                console.log('Stomp 연결 성공: ' + frame);
                updateConnectionStatus('연결됨'); // 연결 성공 상태로 설정
                subscribeToChat();
                loadMessages(socialId);
            }, function (error) {
                // 연결 실패 시 실행되는 콜백
                console.error('Stomp 연결 실패:', error);
                updateConnectionStatus('연결 실패'); // 연결 실패 상태로 설정
                setTimeout(connect, 5000); // 5초 후 재연결 시도
            });
        }

        // 연결 상태 업데이트 함수
        function updateConnectionStatus(status) {
            var statusElement = document.getElementById('connection-status');
            statusElement.textContent = status;
        }

        // 채팅 주제 구독 함수
        function subscribeToChat() {
            stompClient.subscribe('/topic/chat/' + socialId, function (messageOutput) {
                showMessage(JSON.parse(messageOutput.body));
            });
        }

        // 메시지 전송 함수
        function sendMessage() {
            var userId = document.getElementById('userId').value;
            var comment = document.getElementById('comment').value;

            // 연결 상태 확인 및 재연결 시도
            if (!stompClient || !stompClient.connected) {
                console.error('WebSocket 연결이 설정되지 않았습니다.');
                updateConnectionStatus('재연결 중...');
                connect();
                return;
            }

            // 메시지 전송
            stompClient.send("/app/chat/" + socialId, {}, JSON.stringify({
                'socialId': socialId,
                'userId': userId,
                'comment': comment
            }));

            // 입력 필드 초기화
            document.getElementById('comment').value = '';
        }

        // 메시지 표시 함수
        function showMessage(message) {
            var response = document.getElementById('response');
            var messageElement = document.createElement('div');
            console.log("메시지 표시: ", message.comment);

            var userId = document.getElementById('userId').value;

            // message.userId와 userId를 동일한 타입으로 변환
            var messageUserId = String(message.userId);
            var currentUserId = String(userId);

            // 메시지 송신자에 따른 클래스 설정
            var messageClass = messageUserId === currentUserId ? 'fileadd-chat-message sent' : 'fileadd-chat-message received';
            var senderName = messageUserId === currentUserId ? '나' : 'User ID: ' + messageUserId;

            // 메시지 HTML 구성
            messageElement.className = messageClass;
            messageElement.innerHTML = `
            <div class="fileadd-message-content">
                <div class="fileadd-sender">${senderName}</div>
                <div class="fileadd-message-container">
                    <div class="fileadd-message-bubble">${message.comment}</div>
                    <span class="fileadd-time">${new Date(message.createdAt).toLocaleTimeString()}</span>
                </div>
            </div>`;
            response.appendChild(messageElement);
            response.scrollTop = response.scrollHeight; // 스크롤을 최신 메시지로 이동
        }

        // 이전 메시지 로드 함수
        function loadMessages(socialId) {
            console.log("메시지 로드 시도: ", socialId);
            fetch(`/chat/list/${socialId}`)
                    .then(response => {
                        console.log("메시지 로드 성공: ", response);
                        return response.json();
                    })
                    .then(messages => {
                        messages.forEach(message => {
                            console.log("로드된 메시지: ", message);
                            showMessage(message);
                        });
                        // 모든 메시지를 로드한 후 스크롤을 최신 메시지로 이동
                        var response = document.getElementById('response');
                        response.scrollTop = response.scrollHeight;
                    })
                    .catch(error => {
                        console.error("메시지 로드 실패: ", error);
                    });
        }

        // 페이지 로드 시 WebSocket 연결 시작
        window.onload = function () {
            connect();
        };

        // 엔터 키 이벤트 리스너 추가
        document.getElementById('comment').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                sendMessage();
                event.preventDefault();
            }
        });
    </script>
</div>
{{> layout/footer}}
