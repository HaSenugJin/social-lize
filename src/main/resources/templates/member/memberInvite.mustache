{{> layout/header}}
{{> layout/socialtab}}
<div class="invite-container">
    {{> layout/socialsidebar}}
    <div class="invite-content">
        <h2>멤버 20</h2>
        <div class="invite-divider"></div>

        <h2>신청목록</h2>
        <div class="invite-divider"></div>
        <div id="invite-requests">
            <div class="invite-request-item">
                <img src="/images/userprofile3.png" alt="프로필 사진" class="invite-request-pic">
                <span class="invite-request-name">하승진</span>
                <button class="invite-approve-button" onclick="handleRequest(this, true)">승인</button>
                <button class="invite-reject-button" onclick="handleRequest(this, false)">거절</button>
            </div>
            <div class="invite-request-item">
                <img src="/images/userprofile2.png" alt="프로필 사진" class="invite-request-pic">
                <span class="invite-request-name">김완준</span>
                <button class="invite-approve-button" onclick="handleRequest(this, true)">승인</button>
                <button class="invite-reject-button" onclick="handleRequest(this, false)">거절</button>
            </div>
        </div>

        <h2>멤버검색</h2>
        <div class="invite-divider"></div>
        <div class="invite-member-search">
            <input type="text" placeholder="멤버 이름 검색">
            <button>검색</button>
        </div>

        <h2>초대링크</h2>
        <div class="invite-divider"></div>
        <div class="invite-link-section">
            <label for="inviteLink">초대링크</label>
            <div class="invite-link-wrapper">
                <input type="text" id="inviteLink" value="localhost:8080" readonly>
                <button class="invite-copy-button" onclick="copyInviteLink()">
                    <i class="fas fa-copy"></i>
                </button>
            </div>
        </div>

        <h2>멤버리스트</h2>
        <div class="invite-divider"></div>
        <div class="invite-member-sort">
            <select id="memberSort" onchange="sortMembers()">
                <option value="name">이름순</option>
                <option value="recent">최근 가입순</option>
            </select>
        </div>
        <div class="invite-member-list">
            <div class="invite-member-item leader">
                <img src="/images/puppy.png" alt="프로필 사진" class="invite-member-pic">
                <div class="invite-member-info">
                    <span class="invite-member-name">설동훈</span>
                    <span class="invite-member-role">
                        <i class="fas fa-crown"></i> 리더
                    </span>
                </div>
            </div>
            <div class="invite-divider"></div>
            <div class="invite-member-item">
                <img src="/images/userprofile.jpeg" alt="프로필 사진" class="invite-member-pic">
                <div class="invite-member-info">
                    <span class="invite-member-name">김세운</span>
                    <span class="invite-member-details">24.01.01 가입 | 게시물 16 | 댓글 57</span>
                </div>
                <button class="invite-remove-button" onclick="removeMember(this)">삭제</button>
            </div>
            <div class="invite-divider"></div>
            <div class="invite-member-item">
                <img src="/images/userprofile3.png" alt="프로필 사진" class="invite-member-pic">
                <div class="invite-member-info">
                    <span class="invite-member-name">하승진</span>
                    <span class="invite-member-details">24.04.01 가입 | 게시물 18 | 댓글 30</span>
                </div>
                <button class="invite-remove-button" onclick="removeMember(this)">삭제</button>
            </div>
        </div>
    </div>
    <div class="invite-chat-container">
        <div class="invite-chat-header">
            <div class="invite-chat-title">SNS프로젝트 1조</div>
            <div id="connection-status" class="invite-chat-status">연결 중...</div>
            <div class="invite-chat-menu">⋮</div>
        </div>
        <div id="response" class="invite-chat-messages">
            <!-- 채팅 메시지가 이곳에 추가됩니다 -->
        </div>
        <div class="invite-chat-input">
            <input type="hidden" id="socialId" value="1" /> <!-- 소셜 ID -->
            <input type="hidden" id="userId" value="{{sessionUser.id}}" /> <!-- 유저 ID -->
            <input type="text" id="comment" placeholder="메시지를 입력하세요">
            <button id="send-button" onclick="sendMessage()">보내기</button>
        </div>
    </div>

    <div id="mediaModal" class="invite-file-modal">
        <span class="invite-close" onclick="closeModal()">&times;</span>
        <img class="invite-file-modal-content-img" id="modal-img">
        <video class="invite-file-modal-content-video" controls id="modal-video"></video>
        <button class="invite-album-download-btn" id="download-btn">다운로드</button>
    </div>

    <script>
        function switchTab(event, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("invite-tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("invite-tab");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("defaultOpen").click();
            updateAlbumItemCount("Album", "albumCount");
            updateFileItemCount("File", "fileCount");
        });

        function updateAlbumItemCount(tabId, countId) {
            var itemCount = document.querySelectorAll("#" + tabId + " .invite-grid-item").length;
            document.getElementById(countId).innerText = "전체 " + itemCount;
        }

        function openModal(src, isVideo = false) {
            var modal = document.getElementById('mediaModal');
            var modalImg = document.getElementById('modal-img');
            var modalVideo = document.getElementById('modal-video');
            var downloadBtn = document.getElementById('download-btn');

            if (isVideo) {
                modalVideo.src = src;
                modalVideo.style.display = 'block';
                modalImg.style.display = 'none';
                modal.style.display = 'block';
                modalVideo.play();
                downloadBtn.onclick = function () { downloadFile(src, 'video'); };
            } else {
                modalImg.src = src;
                modalImg.style.display = 'block';
                modalVideo.style.display = 'none';
                modal.style.display = 'block';
                downloadBtn.onclick = function () { downloadFile(src, 'image'); };
            }
            modal.addEventListener('click', closeModal);
        }

        function downloadFile(src, type) {
            var a = document.createElement('a');
            a.href = src;
            a.download = type === 'video' ? 'video.mp4' : 'image.png';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function closeModal() {
            var modal = document.getElementById('mediaModal');
            var modalVideo = document.getElementById('modal-video');
            modal.style.display = 'none';
            modalVideo.pause();
            modal.removeEventListener('click', closeModal);
        }

        function handleRequest(button, isApproved) {
            var requestItem = button.parentElement;
            if (isApproved) {
                alert(requestItem.querySelector('.invite-request-name').innerText + ' 승인됨');
            } else {
                alert(requestItem.querySelector('.invite-request-name').innerText + ' 거절됨');
            }
            requestItem.remove();
        }

        function copyInviteLink() {
            var inviteLink = document.getElementById("inviteLink");
            inviteLink.select();
            inviteLink.setSelectionRange(0, 99999); /* For mobile devices */
            document.execCommand("copy");
            alert("초대 링크가 클립보드에 복사되었습니다.");
        }

        document.getElementById("copyLinkButton").addEventListener("click", function() {
            const link = "localhost:8080/";
            navigator.clipboard.writeText(link).then(function() {
                alert("초대 링크가 클립보드에 복사되었습니다.");
            }, function(err) {
                console.error("초대 링크 복사 실패: ", err);
            });
        });

        function sortMembers() {
            var memberSort = document.getElementById('memberSort').value;
            var memberList = document.querySelector('.invite-member-list');
            var members = Array.from(memberList.getElementsByClassName('invite-member-item')).filter(function(member) {
                return !member.classList.contains('leader');
            });

            if (memberSort === 'name') {
                members.sort(function(a, b) {
                    return a.querySelector('.invite-member-name').innerText.localeCompare(b.querySelector('.invite-member-name').innerText, 'ko');
                });
            } else if (memberSort === 'recent') {
                members.sort(function(a, b) {
                    var dateA = a.querySelector('.invite-member-details').innerText.match(/\d{2}\.\d{2}\.\d{2}/)[0].split('.');
                    var dateB = b.querySelector('.invite-member-details').innerText.match(/\d{2}\.\d{2}\.\d{2}/)[0].split('.');
                    var parsedDateA = new Date('20' + dateA[0], dateA[1] - 1, dateA[2]);
                    var parsedDateB = new Date('20' + dateB[0], dateB[1] - 1, dateB[2]);
                    return parsedDateB - parsedDateA;
                });
            }

            members.forEach(function(member) {
                memberList.appendChild(member);
            });
        }

        function removeMember(button) {
            if (confirm("정말로 이 멤버를 삭제하시겠습니까?")) {
                var memberItem = button.parentElement;
                memberItem.remove();
                alert("멤버가 삭제되었습니다.");
            }
        }


        // 채팅 기능 스크립트

        // WebSocket 연결을 위한 변수 초기화
        var stompClient = null;
        var socialId = document.getElementById('socialId').value;

        // 연결 상태 업데이트 함수
        function updateConnectionStatus(status) {
            var statusElement = document.getElementById('connection-status');
            statusElement.textContent = status;
        }

        // WebSocket 연결 함수
        function connect() {
            updateConnectionStatus('연결 중...'); // 연결 시도 중인 상태로 설정
            var socket = new SockJS('/chat');
            stompClient = Stomp.over(socket);

            stompClient.connect({}, function (frame) {
                // 연결 성공 시 실행되는 콜백
                console.log('Stomp 연결 성공: ' + frame);
                updateConnectionStatus('연결됨'); // 연결 성공 상태로 설정
                subscribeToChat();
                loadMessages(socialId);
            }, function (error) {
                // 연결 실패 시 실행되는 콜백
                console.error('Stomp 연결 실패:', error);
                updateConnectionStatus('연결 실패'); // 연결 실패 상태로 설정
                setTimeout(connect, 5000); // 5초 후 재연결 시도
            });
        }

        // 연결 상태 업데이트 함수
        function updateConnectionStatus(status) {
            var statusElement = document.getElementById('connection-status');
            statusElement.textContent = status;
        }

        // 채팅 주제 구독 함수
        function subscribeToChat() {
            stompClient.subscribe('/topic/chat/' + socialId, function (messageOutput) {
                showMessage(JSON.parse(messageOutput.body));
            });
        }

        // 메시지 전송 함수
        function sendMessage() {
            var userId = document.getElementById('userId').value;
            var comment = document.getElementById('comment').value;

            // 연결 상태 확인 및 재연결 시도
            if (!stompClient || !stompClient.connected) {
                console.error('WebSocket 연결이 설정되지 않았습니다.');
                updateConnectionStatus('재연결 중...');
                connect();
                return;
            }

            // 메시지 전송
            stompClient.send("/app/chat/" + socialId, {}, JSON.stringify({
                'socialId': socialId,
                'userId': userId,
                'comment': comment
            }));

            // 입력 필드 초기화
            document.getElementById('comment').value = '';
        }

        // 메시지 표시 함수
        function showMessage(message) {
            var response = document.getElementById('response');
            var messageElement = document.createElement('div');
            console.log("메시지 표시: ", message.comment);

            var userId = document.getElementById('userId').value;

            // message.userId와 userId를 동일한 타입으로 변환
            var messageUserId = String(message.userId);
            var currentUserId = String(userId);

            // 메시지 송신자에 따른 클래스 설정
            var messageClass = messageUserId === currentUserId ? 'invite-chat-message sent' : 'invite-chat-message received';
            var senderName = messageUserId === currentUserId ? '나' : 'User ID: ' + messageUserId;

            // 메시지 HTML 구성
            messageElement.className = messageClass;
            messageElement.innerHTML = `
            <div class="invite-message-content">
                <div class="invite-sender">${senderName}</div>
                <div class="invite-message-container">
                    <div class="invite-message-bubble">${message.comment}</div>
                    <span class="invite-time">${new Date(message.createdAt).toLocaleTimeString()}</span>
                </div>
            </div>`;
            response.appendChild(messageElement);
            response.scrollTop = response.scrollHeight; // 스크롤을 최신 메시지로 이동
        }

        // 이전 메시지 로드 함수
        function loadMessages(socialId) {
            console.log("메시지 로드 시도: ", socialId);
            fetch(`/chat/list/${socialId}`)
                    .then(response => {
                        console.log("메시지 로드 성공: ", response);
                        return response.json();
                    })
                    .then(messages => {
                        messages.forEach(message => {
                            console.log("로드된 메시지: ", message);
                            showMessage(message);
                        });
                        // 모든 메시지를 로드한 후 스크롤을 최신 메시지로 이동
                        var response = document.getElementById('response');
                        response.scrollTop = response.scrollHeight;
                    })
                    .catch(error => {
                        console.error("메시지 로드 실패: ", error);
                    });
        }

        // 페이지 로드 시 WebSocket 연결 시작
        window.onload = function () {
            connect();
        };

        // 엔터 키 이벤트 리스너 추가
        document.getElementById('comment').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                sendMessage();
                event.preventDefault();
            }
        });

    </script>
</div>
{{> layout/footer}}
