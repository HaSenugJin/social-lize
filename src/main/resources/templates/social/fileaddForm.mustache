{{> layout/header}}
<div class="fileadd-navbar">
    <a href="#">게시글</a>
    <a href="#">서랍</a>
    <a href="#">멤버</a>
</div>
<div class="fileadd-container">
    <div class="fileadd-sidebar">
        <div class="fileadd-social-info">
            <img src="/images/puppy.png" alt="소셜 사진">
            <h2>포메와의 산책</h2>
            <div>리더 <span class="fileadd-highlight">포실장과 아이들</span></div>
            <div>멤버 <span class="fileadd-highlight">2,215</span></div>
            <button class="fileadd-postwrite">글 작성하기</button>
            <div class="fileadd-invite-text" id="copyLinkButton">초대링크 복사</div>
            <div class="fileadd-description">포메라니안과 함께하는 즐거운 산책 모임입니다. 다양한 이벤트와 정보를 공유하세요!</div>
            <div class="fileadd-settings-wrapper">
                <div class="fileadd-settings"><a href="#"><i class="fas fa-cog"></i></a></div>
                <div>소셜 설정하기</div>
            </div>
        </div>
    </div>
    <div class="fileadd-content">
        <div class="fileadd-tabs">
            <div class="fileadd-tab active" id="defaultOpen" onclick="switchTab(event, 'Album')">앨범</div>
            <div class="fileadd-tab" onclick="switchTab(event, 'File')">파일</div>
        </div>
        <div id="Album" class="fileadd-tab-content">
            <div class="fileadd-content-header"><span id="albumCount">0</span></div>
            <div class="fileadd-grid-container">
                {{# models.albums}}
                    <div class="fileadd-grid-item {{#isVideo}}video{{/isVideo}}{{^isVideo}}photo{{/isVideo}}" data-type="{{type}}">
                        {{#isVideo}}
                            <video src="{{path}}" onclick="openModal(this.src, true)"></video>
                        {{/isVideo}}
                        {{^isVideo}}
                            <img src="{{path}}" alt="#" onclick="openModal(this.src, false)">
                        {{/isVideo}}
                    </div>
                {{/models.albums}}
            </div>
        </div>
        <div id="File" class="fileadd-tab-content">
            <div class="fileadd-file-search-upload">
                <div class="fileadd-file-search">
                    <input type="text" placeholder="파일 검색">
                </div>
                <div class="fileadd-file-upload">
                    <input type="file" id="fileInput" class="fileadd-file-input" onchange="handleFileUpload()">
                    <button onclick="document.getElementById('fileInput').click()">파일 올리기</button>
                </div>
            </div>
            <div class="fileadd-content-header"><span id="fileCount">0</span></div>
            <div class="fileadd-file-list" id="fileList">
                {{# models.files}}
                    <div class="fileadd-file-item">
                        <span onclick="downloadFile('{{path}}', 'file')" class="fileadd-file-name">{{name}}</span>
                        <button class="fileadd-file-download-btn" onclick="downloadFile('{{path}}', 'file')"><i class="fas fa-download"></i></button>
                    </div>
                {{/ models.files}}
            </div>
        </div>
    </div>
    <div class="fileadd-chat-container">
        <div class="fileadd-chat-header">
            <div class="fileadd-chat-title">SNS프로젝트 1조</div>
            <div class="fileadd-chat-menu">⋮</div>
        </div>
        <div id="response" class="fileadd-chat-messages">
            <!-- 채팅 메시지가 이곳에 추가됩니다 -->
        </div>
        <div class="fileadd-chat-input">
            <input type="hidden" id="socialId" value="1" /> <!-- 소셜 ID -->
            <input type="hidden" id="userId" value="1" /> <!-- 유저 ID -->
            <input type="text" id="comment" placeholder="메시지를 입력하세요">
            <button onclick="sendMessage()">보내기</button>
        </div>
    </div>
    <div id="mediaModal" class="fileadd-file-modal">
        <span class="fileadd-close" onclick="closeModal()">&times;</span>
        <img class="fileadd-file-modal-content-img" id="modal-img">
        <video class="fileadd-file-modal-content-video" controls id="modal-video"></video>
        <button class="fileadd-album-download-btn" id="download-btn">다운로드</button>
    </div>
    <script>
        function switchTab(event, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("fileadd-tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("fileadd-tab");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            event.currentTarget.className += " active";
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("defaultOpen").click();
            updateAlbumItemCount("Album", "albumCount");
            updateFileItemCount("File", "fileCount");
        });

        function updateAlbumItemCount(tabId, countId) {
            var itemCount = document.querySelectorAll("#" + tabId + " .fileadd-grid-item").length;
            document.getElementById(countId).innerText = "전체 " + itemCount;
        }

        function openModal(src, isVideo = false) {
            var modal = document.getElementById('mediaModal');
            var modalImg = document.getElementById('modal-img');
            var modalVideo = document.getElementById('modal-video');
            var downloadBtn = document.getElementById('download-btn');

            if (isVideo) {
                modalVideo.src = src;
                modalVideo.style.display = 'block';
                modalImg.style.display = 'none';
                modal.style.display = 'block';
                modalVideo.play();
                downloadBtn.onclick = function () { downloadFile(src, 'video'); };
            } else {
                modalImg.src = src;
                modalImg.style.display = 'block';
                modalVideo.style.display = 'none';
                modal.style.display = 'block';
                downloadBtn.onclick = function () { downloadFile(src, 'image'); };
            }
            modal.addEventListener('click', closeModal);
        }

        function downloadFile(src, type) {
            var a = document.createElement('a');
            a.href = src;
            a.download = type === 'video' ? 'video.mp4' : 'image.png';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function closeModal() {
            var modal = document.getElementById('mediaModal');
            var modalVideo = document.getElementById('modal-video');
            modal.style.display = 'none';
            modalVideo.pause();
            modal.removeEventListener('click', closeModal);
        }

        function handleFileUpload() {
            var fileInput = document.getElementById('fileInput');
            var fileList = document.getElementById('fileList');
            var fileCount = document.getElementById('fileCount');
            var count = fileList.children.length;
            var existingFiles = {};

            Array.from(fileList.children).forEach(function (item) {
                var name = item.textContent.split(' (')[0];
                existingFiles[name] = (existingFiles[name] || 0) + 1;
            });

            if (fileInput.files.length > 0) {
                for (var i = 0; i < fileInput.files.length; i++) {
                    var file = fileInput.files[i];
                    var fileName = file.name;
                    var fileUrl = URL.createObjectURL(file);
                    var fileElement = document.createElement('div');
                    fileElement.className = 'fileadd-grid-item';

                    if (existingFiles[fileName]) {
                        var newName = fileName + ' (' + existingFiles[fileName] + ')';
                        fileElement.textContent = newName;
                        existingFiles[fileName]++;
                    } else {
                        fileElement.textContent = fileName;
                        existingFiles[fileName] = 1;
                    }

                    fileElement.onclick = function () {
                        var a = document.createElement('a');
                        a.href = fileUrl;
                        a.download = fileName;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                    };
                    fileList.appendChild(fileElement);
                }
            }
        }

        function updateFileItemCount(tabId, countId) {
            var itemCount = document.querySelectorAll("#" + tabId + " .fileadd-file-item").length;
            document.getElementById(countId).innerText = "전체 " + itemCount;
        }

        document.getElementById("copyLinkButton").addEventListener("click", function() {
            const link = "https://example.com/invite"; // 여기에 실제 초대 링크를 입력하세요.
            navigator.clipboard.writeText(link).then(function() {
                alert("초대 링크가 클립보드에 복사되었습니다.");
            }, function(err) {
                console.error("초대 링크 복사 실패: ", err);
            });
        });


        var stompClient = null;

        function connect() {
            // /chat-websocket 엔드포인트로 WebSocket 연결 설정
            var socket = new SockJS('/chat-websocket');
            stompClient = Stomp.over(socket);
            stompClient.connect({}, function (frame) {
                console.log('Connected: ' + frame);
                // /topic/messages 주소로 구독, 서버가 이 주소로 메시지를 브로드캐스트하면 메시지를 수신함
                stompClient.subscribe('/topic/messages', function (messageOutput) {
                    showMessage(JSON.parse(messageOutput.body));
                });
            });
        }

        function sendMessage() {
            var socialId = document.getElementById('socialId').value;
            var userId = document.getElementById('userId').value;
            var comment = document.getElementById('comment').value;
            // /app/sendMessage 주소로 메시지를 보냄
            stompClient.send("/app/sendMessage", {}, JSON.stringify({
                'socialId': socialId,
                'userId': userId,
                'comment': comment
            }));
            document.getElementById('comment').value = '';
        }

        function showMessage(message) {
            var response = document.getElementById('response');
            var messageElement = document.createElement('div');
            messageElement.className = 'fileadd-chat-message';
            messageElement.innerHTML = `
                <img src="/images/puppy.png" alt="프로필 사진" class="fileadd-profile-pic">
                <div class="fileadd-message-content">
                    <div class="fileadd-sender">User ID: ${message.userId}</div>
                    <div class="fileadd-message-container">
                        <div class="fileadd-message-bubble">${message.comment}</div>
                        <span class="fileadd-time">${new Date(message.createdAt).toLocaleTimeString()}</span>
                    </div>
                </div>`;
            response.appendChild(messageElement);
        }

        function loadMessages(socialId) {
            // 해당 소셜 그룹의 채팅 메시지를 조회하여 화면에 표시하는 함수
            fetch(`/chat/${socialId}`)
                    .then(response => response.json())
                    .then(messages => {
                        messages.forEach(showMessage);
                    });
        }

        window.onload = function() {
            var socialId = document.getElementById('socialId').value;
            connect(); // WebSocket 연결 설정
            loadMessages(socialId); // 초기 채팅 메시지 로딩
        };
    </script>
</div>
{{> layout/footer}}
